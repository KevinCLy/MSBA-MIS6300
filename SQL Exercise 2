USE AdventureWorks2012; /*Set current database*/


/*1, Display the total amount collected from the orders for each order date. */

SELECT
SUM(LineTotal) as TotalAmountCollected,
ModifiedDate
FROM
Sales.SalesOrderDetail
GROUP BY
ModifiedDate
ORDER BY 
ModifiedDate DESC;

/*2, Display the total amount collected from selling each of the products, 774 and 777.*/

SELECT
SUM(LineTotal) as TotalAmountCollected,
ProductID
FROM
Sales.SalesOrderDetail
WHERE
ProductID = 774 or ProductID = 777
GROUP BY
ProductID;

/*3, Write a query to display the sales person BusinessEntityID, last name and first name of ALL the sales persons and the name of the territory to which they belong, even though they don't belong to any territory.*/

SELECT
Person.Person.BusinessEntityID,
Person.Person.Lastname,
Person.Person.Firstname,
Sales.SalesTerritoryHistory.TerritoryID
FROM
Person.Person
Left Join Sales.SalesTerritoryHistory on Person.Person.BusinessEntityID = Sales.SalesTerritoryHistory.BusinessEntityID
ORDER BY
BusinessEntityID

/*4,  Write a query to display the Business Entities (IDs, names) of the customers that have the 'Vista' credit card.*/
/* Tables: Sales.CreditCard, Sales.PersonCreditCard, Person.Person*/

SELECT
Person.Person.BusinessEntityID,
Person.Person.LastName,
Person.Person.FirstName,
Sales.CreditCard.CardType
FROM
((Sales.CreditCard
INNER JOIN Sales.PersonCreditCard on Sales.CreditCard.CreditCardID = Sales.PersonCreditCard.CreditCardID)
INNER JOIN Person.Person on Sales.PersonCreditCard.BusinessEntityID = Person.Person.BusinessEntityID)
WHERE
CardType = 'Vista';

/*5, Write a query to display ALL the countries/regions along with their corresponding territory IDs, including those the countries/regions that do not belong to any territory.*/
/* tables: Sales.SalesTerritory and Person.CountryRegion*/

SELECT
Person.CountryRegion.CountryRegionCode,
Sales.SalesTerritory.TerritoryID
FROM
Person.CountryRegion
LEFT JOIN Sales.SalesTerritory on Person.CountryRegion.CountryRegionCode = Sales.SalesTerritory.CountryRegionCode;

/*6, Find out the average of the total dues of all the orders.*/

SELECT
AVG(TotalDue) as AvgOfTotalDue
FROM
Sales.SalesOrderHeader;

/*7, Write a query to report the sales order ID of those orders where the total due is greater than the average of the total dues of all the orders*/

SELECT
TotalDue,
SalesOrderID
FROM
Sales.SalesOrderHeader
WHERE
TotalDue > 3915.9951




